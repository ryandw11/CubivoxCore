using CubivoxCore.Attributes;
using CubivoxCore.Mods;
using CubivoxCore.Utils;

namespace CubivoxCore.Worlds.Generation
{
    /// <summary>
    /// World generators handle the generation of worlds.
    /// 
    /// <para>Mods can create their own world generate to define how voxel terrain should be generated by extended this class.
    /// World generators should be registered in the <see cref="CubivoxMod.LoadGeneratorsStage(GeneratorRegistry)"/> loading stage method.</para>
    /// 
    /// <para>The <see cref="Attributes.Name"/> and <see cref="Attributes.Key"/> attributes are required</para>
    /// 
    /// <para>Note: World generation is only done on the server.</para>
    /// </summary>
    public abstract class WorldGenerator
    {
        /// <summary>
        /// The key for the world generator.
        /// </summary>
        public readonly string Key;
        
        /// <summary>
        /// The name of the world generator.
        /// </summary>
        public readonly string Name;

        public WorldGenerator()
        {
            Name = PropertyUtils.RequiredProperty<Name, string>(GetType());
            Key = PropertyUtils.RequiredProperty<Key, string>(GetType());
        }

        /// <summary>
        /// This method is called when a chunk needs to be generated in a world. Use the chunkData parameter
        /// to set the voxels in a chunk.
        /// </summary>
        /// <param name="chunkX">The chunk x position.</param>
        /// <param name="chunkY">The chunk y position.</param>
        /// <param name="chunkZ">The chunk z position.</param>
        /// <param name="chunkData">The container that holds the chunk data.</param>
        public abstract void GenerateChunk(int chunkX, int chunkY, int chunkZ, ChunkData chunkData);
    }
}
